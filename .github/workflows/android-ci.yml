name: Production Builds
on:
  workflow_dispatch:
    # This allows the workflow to be triggered manually with inputs
    inputs:
      name:
        description: "Release-Build"
        default: "Generate release build"
      testers:
        type: choice
        description: "Select testers"
        options:
          - android
          - internalTesters
          - everyone

jobs:
  build:
    # This job runs on an Ubuntu machine provided by GitHub Actions
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checking out branch
        uses: actions/checkout@v3

      # Step 2: Set up Java (Temurin distribution, Java 17)
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      # Step 3: Set up the Android SDK, which is needed to build Android apps
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2.0.10

      # Step 4: Decode the keystore that is stored as base64 in GitHub secrets
      # The decoded keystore is stored in the /testapp path
      - name: Decode Keystore
        env:
          # Fetch the secrets from GitHub Secrets
          ENCODED_STRING: ${{ secrets.KEYSTORE_BASE_64 }}
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          # Write the base64 encoded keystore string to a file
          echo $ENCODED_STRING > keystore-b64.txt
          # Decode the base64 file and save it as a keystore.jks file
          base64 -d keystore-b64.txt > testapp/keystore.jks

      # Step 5: Give executable permissions to the Gradle wrapper
      - name: Give Gradle wrapper execution permissions
        run: chmod +x testapp/gradlew

      # Step 6: Build the release APK using Gradle
      - name: Build Release apk
        env:
          # Pass sensitive information (keystore passwords) to the Gradle build
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: cd testapp && ./gradlew assembleRelease --stacktrace

      # Step 7: Run Android unit tests on the debug build
      - name: Run Android Tests
        run: cd testapp && ./gradlew :app:testDebugUnitTest --tests "com.example.myapplication.ExampleUnitTest"

      # Step 8: Build the release bundle (AAB file)
      - name: Build Release bundle
        env:
          # Pass keystore information for signing the bundle
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: cd testapp && ./gradlew bundleRelease --stacktrace

      # Step 9: Get the path of the generated AAB file
      - name: Get release file aab path
        id: releaseAab
        run: echo "aabfile=$(find testapp/app/build/outputs/bundle/release/*.aab)" >> $GITHUB_OUTPUT

      # Step 10: Get the path of the generated APK file
      - name: Get release file apk path
        id: releaseApk
        run: echo "apkfile=$(find testapp/app/build/outputs/apk/release/*.apk)" >> $GITHUB_OUTPUT

      # Step 11: Zip the APK and AAB files together for packaging
      - name: Zip Files
        uses: papeloto/action-zip@v1
        with:
          # Specify the files to be zipped (APK and AAB)
          files: ${{ steps.releaseAab.outputs.aabfile }} ${{ steps.releaseApk.outputs.apkfile }}
          # Set the destination name for the zip file
          dest: ${{ steps.releaseApk.outputs.apkfile }}.zip

      # Step 12: Upload the APK file as an artifact for download or further use
      - name: Upload Release Build to Artifacts
        uses: actions/upload-artifact@v3
        with:
          # Name of the artifact and the path to the APK file
          name: release-artifacts
          path: ${{ steps.releaseApk.outputs.apkfile }}
