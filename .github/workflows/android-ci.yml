# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the source code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up JDK 11
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adoptopenjdk'

    # Step 3: Cache Gradle dependencies
    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # Step 4: Build the Android app from the "testapp" directory
    - name: Build the app
      run: cd testapp && ./gradlew build

    # Step 5: Run unit tests
    - name: Run unit tests
      run: cd testapp && ./gradlew test

    # Step 6: Run instrumented tests (you can adjust the name of the tests according to your configuration)
    - name: Run instrumented tests
      run: cd testapp && ./gradlew connectedAndroidTest

    # Step 7: Create a GitHub release and upload the APK
    - name: Create GitHub Release and Upload APK
      uses: softprops/action-gh-release@v1
      with:
          files: app/build/outputs/apk/debug/app-debug.apk
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
